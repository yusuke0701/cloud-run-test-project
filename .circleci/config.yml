version: 2.1

orbs:
    cloudrun: circleci/gcp-cloud-run@1.0.2

executors:
    go-executor:
        working_directory: ~/app
        docker:
            - image: circleci/golang:1.13
        resource_class: small
    gcloud-executor:
        working_directory: ~/app
        docker:
            - image: "cimg/base:stable"
        resource_class: small

jobs:
    go_lint:
        executor: go-executor
        steps:
            - checkout
            - restore_cache:
                  keys:
                      - 'go-mod-{{ .Environment.CACHE_KEY }}-{{ checksum "app/go.mod" }}'
            - run:
                  name: download go modules
                  command: go mod download
                  working_directory: server
            - save_cache:
                  key: 'go-mod-{{ .Environment.CACHE_KEY }}-{{ checksum "app/go.mod" }}'
                  paths:
                      - /go/pkg/mod
            - run:
                  name: Install GolangCI-Lint
                  command: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.26.0
            - run:
                  name: Run GolangCI-Lint
                  command: golangci-lint run --disable-all --enable=goimports --enable=golint --enable=govet --enable=errcheck --enable=staticcheck ./...
                  working_directory: server

    build_and_deploy:
        executor: gcloud-executor
        steps:
            - checkout
            - cloudrun/init
            - cloudrun/build:
                  tag: "gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}"
                  source: server
            - cloudrun/deploy:
                  image: "gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}"
                  platform: managed
                  region: us-east1
                  service-name: sample
                  unauthenticated: true
            - run:
                  command: >
                      # A simple example of how a deployed managed service could be
                      verified or further tested.

                      # This step will send request our "API" and fail if there is
                      unexpected output.

                      GCP_API_RESULTS=$(curl -s "$GCP_DEPLOY_ENDPOINT")

                      if [ "$GCP_API_RESULTS" != "Hello World!" ]; then
                      echo "Result is unexpected"
                      echo 'Result: '
                      curl -s "$GCP_DEPLOY_ENDPOINT"
                      exit 1;
                      fi
                  name: Test managed deployed service.

workflows:
    build_and_deploy_to_managed_workflow:
        jobs:
            - go_lint
            - build_and_deploy:
                  requires:
                      - go_lint
