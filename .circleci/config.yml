version: 2.1

orbs:
    cloudrun: circleci/gcp-cloud-run@1.0.2

executors:
    go-executor:
        working_directory: ~/app
        docker:
            - image: circleci/golang:1.13
        resource_class: small
    gcloud-executor:
        working_directory: ~/app
        docker:
            - image: "cimg/base:stable"
        resource_class: small

jobs:
    lint:
        executor: go-executor
        parameters:
            cache_key:
                type: string
            cache_version:
                type: string
            working_dir:
                type: string
        steps:
            - checkout
            - restore_cache:
                  keys:
                      - << parameters.cache_key >>
                      - << parameters.cache_version >>
            - run:
                  name: download go modules
                  command: go mod download
                  working_directory: << parameters.working_dir >>
            - save_cache:
                  key: << parameters.cache_key >>
                  paths:
                      - /go/pkg/mod
            - run:
                  name: Install GolangCI-Lint
                  command: curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.26.0
            - run:
                  name: Run GolangCI-Lint
                  command: golangci-lint run --disable-all --enable=goimports --enable=golint --enable=govet --enable=errcheck --enable=staticcheck ./...
                  working_directory: << parameters.working_dir >>

    build-and-deploy:
        executor: gcloud-executor
        parameters:
            working_dir:
                type: string
            service_name:
                type: string
        steps:
            - checkout
            - cloudrun/init
            - cloudrun/build:
                  tag: "gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}"
                  source: << parameters.working_dir >>
            - cloudrun/deploy:
                  image: "gcr.io/${GOOGLE_PROJECT_ID}/test-${CIRCLE_SHA1}"
                  platform: managed
                  region: us-east1
                  service-name: << parameters.service_name >>
                  unauthenticated: true
            - run:
                  command: >
                      # A simple example of how a deployed managed service could be
                      verified or further tested.

                      # This step will send request our "API" and fail if there is
                      unexpected output.

                      GCP_API_RESULTS=$(curl -s "$GCP_DEPLOY_ENDPOINT")

                      if [ "$GCP_API_RESULTS" != "Hello World!" ]; then
                      echo "Result is unexpected"
                      echo 'Result: '
                      curl -s "$GCP_DEPLOY_ENDPOINT"
                      exit 1;
                      fi
                  name: Test managed deployed service.

workflows:
    grpc_gateway:
        jobs:
            - lint:
                  name: lint-grpc-gateway
                  working_dir: grpc-gateway
                  cache_key: go-mod-grpc-gateway-{{ .Environment.CACHE_KEY }}-{{ checksum "grpc-gateway/go.mod" }}
                  cache_version: go-mod-grpc-gateway-{{ .Environment.CACHE_KEY }}
            - build-and-deploy:
                  name: deploy-grpc-gateway
                  working_dir: grpc-gateway
                  service_name: grpc-gateway
                  requires:
                      - lint-grpc-gateway
    server:
        jobs:
            - lint:
                  name: lint-server
                  working_dir: server
                  cache_key: go-mod-server-{{ .Environment.CACHE_KEY }}-{{ checksum "server/go.mod" }}
                  cache_version: go-mod-server-{{ .Environment.CACHE_KEY }}
            - build-and-deploy:
                  name: deploy-server
                  working_dir: server
                  service_name: server
                  requires:
                      - lint-server
    gateway:
        jobs:
            - lint:
                  name: lint-gateway
                  working_dir: gateway
                  cache_key: go-mod-gateway-{{ .Environment.CACHE_KEY }}-{{ checksum "gateway/go.mod" }}
                  cache_version: go-mod-gateway-{{ .Environment.CACHE_KEY }}
            - build-and-deploy:
                  name: deploy-gateway
                  working_dir: gateway
                  service_name: gateway
                  requires:
                      - lint-gateway
